AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  # The base CIDR range, subnets will need to be within this range
  BaseVPC:
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/16

  EnableDNS:
    Description: Whether or not to provide DNS for instances
    Type: String
    AllowedValues: ["Yes", "No"]

  CFBucketName:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: cf-bucket-name

Conditions:
  EnableDNS: !Equals [!Ref EnableDNS, "Yes"]

# VPC and corresponding resources, this will cost money because of the NAT
# gateways, this can be mitigated by removing the NAT gateway and whitelisting
# IP addresses in the security group
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref BaseVPC
      EnableDnsSupport: !If [EnableDNS, true, false]
      EnableDnsHostnames: !If [EnableDNS, true, false]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc"

  IGW:
    Type: "AWS::EC2::InternetGateway"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-public-rtb"
        - Key: network
          Value: public

  PublicIGWRoute:
    Type: "AWS::EC2::Route"
    Properties:
      GatewayId: !Ref IGW
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTable

  # An Internet Gateway let's in the cats, does not cost money like a
  # typical NAT gateway does
  GatewayAttach:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  PublicSubnet:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        IsPublic: "Yes"
        VpcID: !Ref VPC
        NumberOfAZs: "1"
        GatewayID: !Ref IGW
        CIDRMap: 10.20.0.0/24,10.20.4.0/24,10.20.8.0/24
        PublicRouteTable: !Ref PublicRouteTable
      TemplateURL: !Sub https://${CFBucketName}.s3.us-east-2.amazonaws.com/templates/vpc/subnet.yaml
      TimeoutInMinutes: 10 # not required
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnetStack"

  PrivateSubnet:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        VpcID: !Ref VPC
        GatewayID: !Ref IGW
        NumberOfAZs: "1"
        CIDRMap: 10.20.2.0/23,10.20.6.0/23,10.20.10.0/23
        PublicRouteTable: !Ref PublicRouteTable
      TemplateURL: !Sub https://${CFBucketName}.s3.us-east-2.amazonaws.com/templates/vpc/subnet.yaml
      TimeoutInMinutes: 10 # not required
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnetStack"
Outputs:
  VpcId:
    Description: ID of Shared Infrastructure VPC
    Value: !Ref VPC
    Export: # added to export
      Name:
        Fn::Sub: ${AWS::StackName}-VpcId

  PublicSubnetId1:
    Description: Public Subnet ID List
    Value:
      Fn::Sub: ${PublicSubnet.Outputs.PublicSubnetId1}
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PublicSubnetId1

  CIDR:
    Description: CIDR value of the base vpc
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-CidrBlock
